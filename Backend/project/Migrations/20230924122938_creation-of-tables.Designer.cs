// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using project.Models;

#nullable disable

namespace project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230924122938_creation-of-tables")]
    partial class creationoftables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("project.Models.DoctorSpecialization", b =>
                {
                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("SpecializationCode")
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("SpecializationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "SpecializationCode");

                    b.HasIndex("SpecializationCode");

                    b.ToTable("DoctorSpecialization");
                });

            modelBuilder.Entity("project.Models.IDoctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("DoctorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("project.Models.ISurgery", b =>
                {
                    b.Property<int>("SurgeryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurgeryId"));

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<decimal>("EndTime")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal>("StartTime")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("SurgeryCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SurgeryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SurgeryId");

                    b.ToTable("Surgery");
                });

            modelBuilder.Entity("project.Models.Specialization", b =>
                {
                    b.Property<string>("SpecializationCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SpecializationCode");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("project.Models.DoctorSpecialization", b =>
                {
                    b.HasOne("project.Models.IDoctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("project.Models.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
